model User {
  id            String      @id @default(uuid())
  email         String      @unique @db.VarChar(255)
  role          Role        @default(MODERATOR)
  memberId      String?     @map("member_id")
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")
  emailVerified Boolean     @default(false)
  image         String?
  name          String
  accounts      Account[]
  sessions      Session[]
  member        member?     @relation(fields: [memberId], references: [id])
  audits        AuditLogs[]

  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}

model Project {
  id                  String                @id @default(uuid())
  name                String
  githubLink          String?               @map("github_link")
  demoLink            String?               @map("demo_link")
  tech_stack          String[]
  description         String
  thumbnailUrl        String?               @map("thumbnail_url")
  createdAt           DateTime              @default(now()) @map("created_at")
  updatedAt           DateTime              @updatedAt @map("updated_at")
  ProjectContributors ProjectContributors[]
  ProjectTags         ProjectTags[]

  @@map("projects")
}

model Tag {
  id          String        @id @default(uuid())
  name        String        @unique
  ProjectTags ProjectTags[]

  @@map("tags")
}

model ProjectTags {
  id        String  @id @default(uuid())
  projectId String  @map("project_id")
  tagId     String  @map("tag_id")
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  tag       Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@map("project_tags")
}

model Contributor {
  id                  String                @id @default(uuid())
  name                String
  avatarUrl           String?               @map("avatar_url")
  githubUsername      String?               @map("github_username")
  ProjectContributors ProjectContributors[]

  @@map("contributors")
}

model ProjectContributors {
  id            String      @id @default(uuid())
  projectId     String      @map("project_id")
  contributorId String      @map("contributor_id")
  contributor   Contributor @relation(fields: [contributorId], references: [id], onDelete: Cascade)
  project       Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("project_contributors")
}

model Events {
  id            String          @id @default(uuid())
  name          String
  description   String
  status        EventStatus     @default(UPCOMING)
  EventSchedule EventSchedule[]
  EventImage    EventImage[]

  @@map("events")
}

model EventSchedule {
  id          String   @id @default(uuid())
  startDate   DateTime @map("start_date")
  endDate     DateTime @map("end_date")
  description String
  eventId     String   @map("event_id")
  event       Events   @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@map("event_schedule")
}

model EventImage{
    id          String          @id @default(uuid())
    imageUrl    String?          @map("image_url") 
    imageType   EventImageType  @map("image_type")
    uploadedAt  DateTime        @default(now()) @map("uploaded_at")
    deletedAt   DateTime?       @map("deleted_at")
    eventId     String          @map("event_id")
    event       Events          @relation(fields: [eventId], references: [id], onDelete: Cascade)

    @@map("event_images")
  }

model member {
  id        String       @id @default(uuid())
  name      String
  avatarUrl String?      @map("avatar_url")
  role      String
  year      DateTime
  status    MemberStatus
  User      User[]

  @@map("members")
}

model AuditLogs {
  id        String     @id @default(uuid())
  action    ActionType @default(CREATE)
  userId    String
  entity    Models
  entityId  String
  timestamp DateTime   @default(now())
  changes   Json?
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([timestamp])
  @@index([userId])
  @@index([entity, entityId])
}

enum MemberStatus {
  ACTIVE
  INACTIVE
}

enum ActionType {
  CREATE
  UPDATE
  DELETE
}

enum Models {
  USER
  MEMBER
  EVENT
  PROJECT
  PROJECTCONTRIBUTORS
  EVENTSCHEDULE
  CONTRIBUTOR
  TAG
}

enum Role {
  ADMIN
  MODERATOR
}

enum EventStatus {
  UPCOMING
  ONGOING
  COMPLETED
}

enum EventImageType{
    PROMOTIONAL
    GALLERY
    GUESTS
  }
